// Enhanced PRD viewer (beautiful, sectioned UI)
'use client';

import { X, CheckCircle2, Target, Users, Calendar, Lightbulb, Zap, Shield, TrendingUp } from 'lucide-react';

interface PRDViewerProps {
  prdData: any; // expects { projectName, content } where content can be string or { rawText }
  onClose: () => void;
}

export default function PRDViewer({ prdData, onClose }: PRDViewerProps) {
  const contentString = typeof prdData?.content === 'string'
    ? prdData.content
    : prdData?.content?.rawText || '';

  const parseSections = (content: string) => {
    const sections: { [key: string]: string } = {};
    const lines = content.split('\n');
    let currentSection = '';
    let currentContent: string[] = [];

    lines.forEach((line) => {
      if (line.trim().startsWith('#')) {
        if (currentSection) {
          sections[currentSection] = currentContent.join('\n').trim();
        }
        currentSection = line.replace(/^#+\s*/, '').trim();
        currentContent = [];
      } else if (currentSection) {
        currentContent.push(line);
      }
    });

    if (currentSection) {
      sections[currentSection] = currentContent.join('\n').trim();
    }

    return sections;
  };

  const sections = parseSections(contentString);

  const getSectionIcon = (title: string) => {
    const titleLower = title.toLowerCase();
    if (titleLower.includes('overview') || titleLower.includes('summary')) return <Lightbulb className="w-6 h-6" />;
    if (titleLower.includes('objective') || titleLower.includes('goal')) return <Target className="w-6 h-6" />;
    if (titleLower.includes('user') || titleLower.includes('audience')) return <Users className="w-6 h-6" />;
    if (titleLower.includes('timeline') || titleLower.includes('schedule')) return <Calendar className="w-6 h-6" />;
    if (titleLower.includes('feature') || titleLower.includes('requirement')) return <CheckCircle2 className="w-6 h-6" />;
    if (titleLower.includes('technical') || titleLower.includes('architecture')) return <Zap className="w-6 h-6" />;
    if (titleLower.includes('security') || titleLower.includes('compliance')) return <Shield className="w-6 h-6" />;
    if (titleLower.includes('success') || titleLower.includes('metric')) return <TrendingUp className="w-6 h-6" />;
    return <CheckCircle2 className="w-6 h-6" />;
  };

  const formatContent = (content: string) => {
    const lines = content.split('\n');
    return lines.map((line, idx) => {
      const trimmed = line.trim();
      if (trimmed.startsWith('- ') || trimmed.startsWith('* ')) {
        return (
          <li key={idx} className="ml-6 mb-2 text-gray-700 leading-relaxed">
            {trimmed.substring(2)}
          </li>
        );
      }
      if (/^\d+\./.test(trimmed)) {
        return (
          <li key={idx} className="ml-6 mb-2 text-gray-700 leading-relaxed list-decimal">
            {trimmed.replace(/^\d+\.\s*/, '')}
          </li>
        );
      }
      if (trimmed.startsWith('**') && trimmed.endsWith('**')) {
        return (
          <p key={idx} className="font-semibold text-gray-900 mb-3 mt-4">
            {trimmed.replace(/\*\*/g, '')}
          </p>
        );
      }
      if (trimmed) {
        return (
          <p key={idx} className="text-gray-700 mb-3 leading-relaxed">
            {trimmed}
          </p>
        );
      }
      return <br key={idx} />;
    });
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto">
      <div className="bg-white rounded-2xl shadow-2xl max-w-5xl w-full my-8 overflow-hidden">
        <div className="bg-gradient-to-r from-purple-600 via-pink-600 to-purple-600 text-white p-8 relative">
                <button
                  onClick={onClose}
            className="absolute top-6 right-6 text-white/80 hover:text-white transition-colors"
                >
            <X className="w-6 h-6" />
                </button>
          <div className="max-w-3xl">
            <h1 className="text-4xl font-bold mb-3">{prdData?.projectName || 'Project'}</h1>
            <p className="text-purple-100 text-lg">Product Requirements Document</p>
          </div>
        </div>

        <div className="p-8 space-y-8 max-h-[70vh] overflow-y-auto">
          {Object.entries(sections).map(([title, content], idx) => {
            // Skip sections that mention the model or AI
            const titleLower = title.toLowerCase();
            const contentLower = (content as string).toLowerCase();
            if (
              titleLower.includes('model') ||
              titleLower.includes('generated by') ||
              titleLower.includes('ai model') ||
              contentLower.includes('claude-sonnet') ||
              contentLower.includes('claude sonnet') ||
              contentLower.includes('anthropic') ||
              /model:\s*claude/i.test(contentLower)
            ) {
              return null;
            }
              return (
              <div key={idx} className="bg-gradient-to-br from-gray-50 to-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
                <div className="flex items-start gap-4 mb-4">
                  <div className="bg-gradient-to-br from-purple-500 to-pink-500 text-white p-3 rounded-lg shadow-lg">
                    {getSectionIcon(title)}
                  </div>
                  <h2 className="text-2xl font-bold text-gray-900 flex-1 pt-2">
                    {title}
                  </h2>
                </div>
                <div className="space-y-2 text-gray-700">
                  {formatContent(content as string)}
                </div>
              </div>
            );
          })}
          </div>

        <div className="bg-gray-50 px-8 py-6 border-t border-gray-200 flex justify-between items-center">
          <p className="text-sm text-gray-600">Generated with CodeLaunch</p>
          <button
            onClick={onClose}
            className="px-6 py-2.5 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg font-semibold hover:shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}
